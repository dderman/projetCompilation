AUTHORS
-------

- RIVOAL Samuel
- DERMAN Diego

===============

Description of the project
--------------------------

This μ-project is a very simple compiler of a stack-oriented programming language. It was made with educational purposes and written in OCaml with the help of two utils: ocamllex a lexer or scanner for OCaml and Menhir, which is a LR(1) parser generator for OCaml.

===============

Sources
-------

Git repository: https://github.com/dderman/projetCompilation/

Release : commit 5801f6ea029696f3919574b5916776cf1b2d18a8

===============

How to…
-------

…retrieve the sources?

  git clone https://github.com/dderman/projetCompilation/

…compile?

  ocamlbuild main.*CODE*

…execute and test?

  main.*CODE* tests/prog.pfx

*CODE* = 'native' 
*CODE* = 'byte' 
**Where code can be either 'native' or 'byte' generating code whether by the native compiler or the bytecode compiler respectively. For more information head to: https://realworldocaml.org/v1/en/html/the-compiler-backend-byte-code-and-native-code.html  


===============

Structure of the project
------------------------

The project is organized as following:

The master folder contains both the compiler and its source coide (main), as well as the parser and lexer (also menhir and ocamllex files as well as their generated code), and this README file.
The expressions folder contains the abstract syntax trees for the two most complex syntactic structures.
The tests folder is quite self explanatory, contains examples as well as instructions to check their response appropriately.
Finally, in the utils folder you can find the lexer utilities to find different tokens.

file tree:

projetCompilation
├── pfxAst.ml
├── pfxLexer.mll
├── pfxParser.mly
├── Questions.md
├── main.ml
├── main.byte
├── _tags
├── README
├── _build
│   ├── ...
│   └── ...
├── expressions
│   ├── basicExprAst.ml
│   └── functionExprAst.ml
├── tests
│   ├── ex_course1.pfx
│   ├── ex_course.pfx
│   ├── first.pfx
│   ├── prog0.pfx
│   ├── prog_1arg_0.pfx
│   ├── prog_1arg_1.pfx
│   ├── prog1.pfx
│   ├── prog_2arg_0.pfx
│   ├── prog2.pfx
│   ├── prog_3arg_0.pfx
│   ├── prog3.pfx
│   ├── prog4.pfx
│   ├── prog_5arg_0.pfx
│   ├── prog5.pfx
│   ├── README
│   └── second.pfx
└── utils
    ├── a.out
    ├── lexingII.ml
    ├── lexingII.ml
    ├── binOp.ml
    ├── binOp.mli
    ├── location.ml
    └── location.mli

===============

Progress
--------

- We stopped at 7.1
- The parser (question 6.2) works correctly

===============

Know bugs and issues
--------------------

- 

===============

Helpful resources
-----------------

- We used the OCaml guide provided by https://realworldocaml.org/ in multiple instances to solve many problems.
- We used all of the resources made available by the professors to get a step-by-step idea of what we were supposed to do.

===============

Difficulties
------------

- team programming: having to use a VCS such as git and avoiding conflicts
- thinking functional
- changing habits by using an unknown language
- getting feedback from moodle's forum and not from face to face meetings was quite disorienting 

