# 1 "pfxLexer.mll"
 

  open PfxParser ;;

(*type token =
  | PUSH | POP | SWAP | ADD | SUB | MUL | DIV | REM | EOF
  | INT of int | Newline | RESULT of string;;*)

let mk_int nb lexbuf =
 try INT (int_of_string nb)
 with Failure _ -> 
                let loc = Location.curr lexbuf and msg = Printf.sprintf "Illegal integer '%s'\n " nb in
                raise (LexingII.Error (msg,loc))
                (*failwith (Printf.sprintf "Illegal integer '%s': " nb)*) ;;

let string_of_token token = match token with
    | PUSH -> " PUSH "
    | POP -> " POP "
    | SWAP -> " SWAP "
    | ADD -> " ADD "
    | SUB -> " SUB "
    | MUL -> " MUL "
    | DIV ->  " DIV "
    | REM -> " REM "
    | EOF -> " EOF"
    | INT n -> string_of_int n
    (*| Newline -> " newline "*)
    (*| RESULT s -> s*)
;;

(*a function to increment the line number in the lexing buffer
  when meeting a newline and to pass directly to the following token*)
let handle_newline f lexbuf =
    Location.incr_line lexbuf ;
    f lexbuf ;;



# 41 "pfxLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\241\255\242\255\001\000\000\000\000\000\000\000\002\000\
    \001\000\002\000\000\000\010\000\006\000\255\255\001\000\026\000\
    \031\000\061\000\004\000\006\000\000\000\251\255\250\255\000\000\
    \002\000\010\000\249\255\247\255\006\000\248\255\000\000\246\255\
    \005\000\245\255\001\000\244\255\006\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\002\000\001\000\255\255\000\000\255\255\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\012\000";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\015\000\
    \015\000\015\000\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\255\255\000\000\036\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\013\000\013\000\012\000\014\000\012\000\012\000\
    \255\255\000\000\012\000\255\255\012\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\255\255\000\000\012\000\255\255\
    \010\000\255\255\015\000\000\000\255\255\003\000\036\000\000\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\016\000\000\000\000\000\255\255\
    \017\000\016\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\027\000\025\000\005\000\034\000\028\000\016\000\
    \021\000\032\000\029\000\000\000\031\000\006\000\035\000\000\000\
    \009\000\018\000\004\000\008\000\022\000\030\000\023\000\019\000\
    \024\000\020\000\026\000\033\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\014\000\000\000\000\000\000\000\012\000\
    \036\000\255\255\012\000\036\000\012\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\015\000\255\255\012\000\015\000\
    \000\000\016\000\010\000\255\255\016\000\000\000\003\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\015\000\255\255\255\255\017\000\
    \016\000\016\000\017\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\023\000\024\000\000\000\004\000\007\000\017\000\
    \020\000\005\000\028\000\255\255\030\000\000\000\034\000\255\255\
    \000\000\009\000\000\000\000\000\018\000\006\000\008\000\009\000\
    \008\000\019\000\025\000\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\015\000\255\255\255\255\255\255\255\255\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 52 "pfxLexer.mll"
           (handle_newline token lexbuf  (* | newline+ {token lexbuf}*))
# 164 "pfxLexer.ml"

  | 1 ->
# 56 "pfxLexer.mll"
          (token lexbuf)
# 169 "pfxLexer.ml"

  | 2 ->
let
# 59 "pfxLexer.mll"
             nb
# 175 "pfxLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 59 "pfxLexer.mll"
                (mk_int nb lexbuf)
# 179 "pfxLexer.ml"

  | 3 ->
# 62 "pfxLexer.mll"
               (token lexbuf)
# 184 "pfxLexer.ml"

  | 4 ->
# 65 "pfxLexer.mll"
          ( PUSH )
# 189 "pfxLexer.ml"

  | 5 ->
# 66 "pfxLexer.mll"
          ( POP )
# 194 "pfxLexer.ml"

  | 6 ->
# 67 "pfxLexer.mll"
          ( SWAP )
# 199 "pfxLexer.ml"

  | 7 ->
# 68 "pfxLexer.mll"
          ( ADD )
# 204 "pfxLexer.ml"

  | 8 ->
# 69 "pfxLexer.mll"
          ( SUB )
# 209 "pfxLexer.ml"

  | 9 ->
# 70 "pfxLexer.mll"
          ( MUL )
# 214 "pfxLexer.ml"

  | 10 ->
# 71 "pfxLexer.mll"
          ( DIV )
# 219 "pfxLexer.ml"

  | 11 ->
# 72 "pfxLexer.mll"
          ( REM )
# 224 "pfxLexer.ml"

  | 12 ->
# 75 "pfxLexer.mll"
          (token lexbuf)
# 229 "pfxLexer.ml"

  | 13 ->
# 79 "pfxLexer.mll"
       ( EOF )
# 234 "pfxLexer.ml"

  | 14 ->
let
# 82 "pfxLexer.mll"
        c
# 240 "pfxLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 82 "pfxLexer.mll"
          ( let loc = Location.curr lexbuf and msg = Printf.sprintf "Illegal character '%c'\n" c in 
            raise (LexingII.Error(msg, loc))
     (*failwith (Printf.sprintf "Illegal character '%c': " c)*))
# 246 "pfxLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

